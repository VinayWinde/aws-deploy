version: 0.2

phases:
  pre_build:
    commands:
      - echo Installing dependencies and building the application...
      - mvn clean install
      - echo Logging in to Amazon ECR...
      - aws --version
      - REPOSITORY_URI=927450005871.dkr.ecr.us-east-1.amazonaws.com/name-repositoris-elastic
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - DOCKER_CONTAINER_NAME=name-repositoris-elastic
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo --- imagedefinitions.json ---
      - cat imagedefinitions.json
#post_build:
#  commands:
#    - echo Build completed on `date`
#    - echo Pushing the Docker images...
#    - docker push $REPOSITORY_URI:latest
#    - docker push $REPOSITORY_URI:$IMAGE_TAG
#    - echo Writing image definitions file...
#    - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#    - cat imagedefinitions.json
#
#    # OPTIONAL: Trigger ECS update manually (if no CodePipeline)
#    - echo Updating ECS service...
#    - aws ecs update-service \
#      --cluster your-cluster-name \
#      --service your-service-name \
#      --force-new-deployment

artifacts:
  files:
    - imagedefinitions.json
    - target/aws.jar
